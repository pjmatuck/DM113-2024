//------------------------------------------------------------------------------
// <auto-generated>
//     Esse código foi gerado por uma ferramenta.
//
//     As alterações no arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Prova", Namespace="http://schemas.datacontract.org/2004/07/MediaNotasSoapService.Models")]
    public partial class Prova : object
    {
        
        private string MateriaField;
        
        private float NotaField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Materia
        {
            get
            {
                return this.MateriaField;
            }
            set
            {
                this.MateriaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Nota
        {
            get
            {
                return this.NotaField;
            }
            set
            {
                this.NotaField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MediaService.IMediaService")]
    public interface IMediaService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/CalcularMedia", ReplyAction="http://tempuri.org/IMediaService/CalcularMediaResponse")]
        System.Threading.Tasks.Task<float> CalcularMediaAsync(float nota1, float nota2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediaService/GetProva", ReplyAction="http://tempuri.org/IMediaService/GetProvaResponse")]
        System.Threading.Tasks.Task<MediaService.Prova> GetProvaAsync(string nomeDaMateria);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IMediaServiceChannel : MediaService.IMediaService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class MediaServiceClient : System.ServiceModel.ClientBase<MediaService.IMediaService>, MediaService.IMediaService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar o ponto de extremidade de serviço.
        /// </summary>
        /// <param name="serviceEndpoint">O ponto de extremidade a ser configurado</param>
        /// <param name="clientCredentials">As credenciais do cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MediaServiceClient() : 
                base(MediaServiceClient.GetDefaultBinding(), MediaServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMediaService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MediaServiceClient.GetBindingForEndpoint(endpointConfiguration), MediaServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MediaServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MediaServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MediaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<float> CalcularMediaAsync(float nota1, float nota2)
        {
            return base.Channel.CalcularMediaAsync(nota1, nota2);
        }
        
        public System.Threading.Tasks.Task<MediaService.Prova> GetProvaAsync(string nomeDaMateria)
        {
            return base.Channel.GetProvaAsync(nomeDaMateria);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMediaService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Não foi possível encontrar o ponto de extremidade com o nome \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMediaService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5254/MediaService.wsdl");
            }
            throw new System.InvalidOperationException(string.Format("Não foi possível encontrar o ponto de extremidade com o nome \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MediaServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMediaService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MediaServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMediaService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMediaService,
        }
    }
}
